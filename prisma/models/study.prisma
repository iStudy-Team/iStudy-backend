// Prisma models for academic, class, and attendance management

model Academic_Year {
  id           String   @id @db.VarChar(255)
  school_year  String   @unique @db.VarChar(20)
  start_date   DateTime?
  end_date     DateTime?
  status       Int      @default(0) // 0: Inactive, 1: Active, 2: Completed
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(0)
  classes      Class[]
  grade_levels Grade_Level[]
}

model Grade_Level {
  id          String   @id @db.VarChar(255)
  name        String   @unique @db.VarChar(255)
  description String?
  academic_year_id String @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(0)
  classes     Class[]
  class_promotions ClassPromotion[] @relation("ClassPromotionGradeLevel")
  academic_year Academic_Year @relation(fields: [academic_year_id], references: [id], onDelete: Cascade)
}

model Schedule {
  id         String   @id @db.VarChar(255)
  class_id    String   @db.VarChar(255)
  day        DateTime? @db.Date
  start_time  DateTime? @db.Time
  end_time    DateTime? @db.Time

  class      Class    @relation(fields: [class_id], references: [id], onDelete: Cascade)

  @@map("Schedule") // tên bảng trong DB
}

model Class {
  id                String            @id @db.VarChar(255)
  academic_year_id  String
  grade_level_id    String
  name              String            @unique @db.VarChar(255)
  capacity          Int?
  tuition_fee       String?
  start_date        DateTime?
  end_date          DateTime?
  status            Int               @default(0) // 0: open, 1: close, 2: completed
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  academic_year     Academic_Year     @relation(fields: [academic_year_id], references: [id])
  grade_level       Grade_Level       @relation(fields: [grade_level_id], references: [id])
  class_teachers    Class_Teacher[]
  class_enrollments Class_Enrollment[]
  class_sessions    Class_Session[]
  schedule         Schedule[]
  invoid         Invoice[]
  converted_from_promotions ClassPromotion[] @relation("ClassPromotionConvertedClass")
}

model Class_Teacher {
  id         String   @id @db.VarChar(255)
  class_id   String
  teacher_id String
  role       Int      @default(0) // 0: Main Teacher, 1: Assistant Teacher, 2: Substitute Teacher
  start_date DateTime?
  end_date   DateTime?
  status     Int      @default(1) // 0: Inactive, 1: Active
  class      Class    @relation(fields: [class_id], references: [id], onDelete: Cascade)
  teacher    Teacher  @relation(fields: [teacher_id], references: [id])
}

model Class_Enrollment {
  id                  String   @id @db.VarChar(255)
  class_id            String
  student_id          String
  enrollment_date     DateTime
  end_date            DateTime?
  status              Int      @default(1) // 0: Inactive, 1: Active, 2: Completed
  tuition_fee         String?
  original_fee        String?
  discount_percentage Float    @default(0)
  class               Class    @relation(fields: [class_id], references: [id])
  student             Student  @relation(fields: [student_id], references: [id])
}

model Class_Session {
  id           String   @id @db.VarChar(255)
  class_id     String
  teacher_id   String
  date         DateTime
  start_time   DateTime
  end_time     DateTime
  topic        String?
  description  String?
  status       Int      @default(0) // 0: Scheduled, 1: Completed, 2: Canceled
  cancel_reason String?
  class        Class    @relation(fields: [class_id], references: [id])
  teacher      Teacher  @relation(fields: [teacher_id], references: [id])
  attendances  Attendance[]
}

model Attendance {
  id               String   @id @db.VarChar(255)
  class_session_id String
  student_id       String
  status           Int      // 0: Present, 1: Absent, 2: Late, 3: Excused
  comment          String?
  recorded_by      String
  recorded_at      DateTime @default(now())
  class_session    Class_Session @relation(fields: [class_session_id], references: [id], onDelete: Cascade)
  student          Student  @relation(fields: [student_id], references: [id])
  teacher          Teacher  @relation(fields: [recorded_by], references: [id])
}
